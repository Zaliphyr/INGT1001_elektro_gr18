# -*- coding: utf-8 -*-
from sense_hat import SenseHat, ACTION_HELD, ACTION_RELEASED, ACTION_PRESSED
import time
import random

sense = SenseHat()
sense.set_rotation(270)

# Main program variabler
meny_selection = 0
meny_max = 6
meny_runned = [False] * 7 
filename = "save.csv"
box_width = 100
start_screen = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

# Verdi som blir true om man holder inne middle knappen, brukes for å stoppe programmer
interrupt = False

# Verdier som indikerer om man har trykket en knapp
j_right_click = False
j_left_click = False
j_middle_click = False

# Funksjoner som er bindet til knappene, vil aktivere verdiene over
def j_right(event):
    global j_right_click
    if event.action == ACTION_PRESSED:
        j_right_click = True


def j_left(event):
    global j_left_click
    if event.action == ACTION_PRESSED:
        j_left_click = True


def j_middle(event):
    global interrupt
    global j_middle_click
    if event.action == ACTION_PRESSED:
        j_middle_click = True
    elif event.action == ACTION_HELD:
        interrupt = True


# Funksjon for å resette alle joy inputs
def reset_interrupt():
    global interrupt
    global j_middle_click
    global j_left_click
    global j_right_click
    interrupt = False
    j_middle_click = False
    j_left_click = False
    j_right_click = False
        


#Bildene og tekst som brukes i menyen
meny_pictures = {0: [
    (245, 66, 35), (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 176, 35),
    (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 176, 35), (245, 213, 35), (250, 232, 31),
    (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 213, 35), (250, 232, 31), (255, 246, 162),
    (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 176, 35), (245, 176, 35), (250, 232, 31), (255, 246, 162), (255, 255, 255),
    (5, 47, 189), (5, 77, 224), (35, 118, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245),
    (5, 77, 224), (35, 118, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245),
    (35, 118, 245), (35, 126, 245), (35, 111, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245), (35, 118, 245),
    (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (35, 118, 245), (5, 77, 224),
    ],
    1: [
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (255, 255, 255), (208, 2, 27), (208, 2, 27), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (255, 255, 255), (208, 2, 27), (208, 2, 27), (208, 2, 27), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    2: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    3: [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ],
    4: [
      (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0),
    (0, 255, 0), (0, 255, 0), (255, 0, 0), (255, 0, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0),
    (0, 255, 0), (255, 0, 0), (255, 0, 0), (255, 0, 0), (255, 0, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0),
    (255, 0, 0), (255, 0, 0), (0, 0, 255), (0, 255, 0), (255, 0, 0), (255, 0, 0), (0, 255, 0), (0, 0, 255),
    (255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 0, 255), (0, 255, 0), (255, 0, 0), (0, 0, 255), (0, 0, 255),
    (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 0, 255), (0, 0, 255), (0, 0, 255), (0, 0, 255), (0, 255, 0),
    (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 0, 255), (0, 0, 255), (0, 255, 0), (0, 255, 0),
    (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0),
        ],
    5: [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
    (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
    (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255),
    (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
    (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
     ],
    6: [
        (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27),
    ]
}
meny_text = ["Magnus sitt program: Viser retningen til himmelen, et eventyr uten like", 
              "Karl Emil sitt program: Viser live temperatur på skjerm", 
              "Markus sitt program: Blås opp en ballong!", 
              "Kai sitt program: Grimaser som endrer seg etter temperatur", 
              "Even sitt program: Animasjon som viser helning om pitch-aksen", 
              "Daniel sitt program: Få en Pokemon basert på temperatur",
              "Klikk for å avslutte, vil lagre verdier til fil"]
              

spill_text = ["Hold LED-skjermen mot deg og roter! Se om du kan få pila til å peke mot bakken", 
              "Her ser man hva temperatur Sense hat leser, hold inne joy for å avslutte program", 
              "Blås på trykksensoren for å blåse oppballongen", 
              "Få 3 forskjellige grimaser, under 15 grader fryser den og klapper tenner, mellom 15 og 25 er den komfortabel og over 25 blir det for varmt", 
              "Viser 3 forskjellige animasjoner, avhengig om pitchverdien er over, under eller mellom 0.5 og -0.5 radianer", 
              "Rist Rasberry PI for å åpne Pokeballen. under 30 grader gir Piplup, og over gir Pikachu",
              "Verdier lagret, takk for denne gang!"]


# Funksjon for å tegne rød firkant til skjermen
def red_square():
    if  meny_selection != 6 and meny_runned[meny_selection]:
      r = (255, 0, 0)
      for i in range(8):
        sense.set_pixel(i, 0, r)
        sense.set_pixel(0, i, r)
        sense.set_pixel(7, i, r)
        sense.set_pixel(i, 7, r)
    time.sleep(0.01)


def screen_six_display():
  if meny_selection == 6:
    for i in range(len(meny_runned) - 1):
      if meny_runned[i]:
          sense.set_pixel(1 + i, 7, (0, 255, 0))
      else:
          sense.set_pixel(1 + i, 7, (255, 255, 25))
  time.sleep(0.1)

# Våre egne funksjoner
def kalles():
    reset_interrupt()
    r = (255, 0, 0)
    b = (0, 0, 255)
    w = (255, 255, 255)
    n_0 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_1 = [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]
    n_2 = [[0, 0], [1, 0], [2, 0], [2, 1], [0, 2], [1, 2], [2, 2], [0, 3], [0, 4], [1, 4], [2, 4]]
    n_3 = [[0, 0], [1, 0], [2, 0], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_4 = [[0, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [2, 4]]
    n_5 = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_6 = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_7 = [[0, 0], [1, 0], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4]]
    n_8 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [0, 3], [2, 3], [0, 4], [1, 4], [2, 4]]
    n_9 = [[0, 0], [1, 0], [2, 0], [0, 1], [2, 1], [0, 2], [1, 2], [2, 2], [2, 3], [0, 4], [1, 4], [2, 4]]
    neg = [[0, 1], [1, 1], [2, 1]]
    pos = [[1, 0], [0, 1], [1, 1], [2, 1], [1, 2]]
    err = [[0, 0], [1, 0], [2, 0], [0, 1], [0, 2], [1, 2], [2, 2], [0, 3], [0, 4], [1, 4], [2, 4]]
    nums = [n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7, n_8, n_9, neg, pos, err]

    def printNm(nm, nm_lst):
        sense.clear()
        if nm < 0:
            for pix in nm_lst[10]:
                sense.set_pixel(pix[0], pix[1], b)
        elif nm > 0:
            for pix in nm_lst[11]:
                sense.set_pixel(pix[0], pix[1], r)
        if nm > 99 or nm < -99:
            for pix in nm_lst[12]:
                sense.set_pixel(1 + pix[0], 3 + pix[1], w)
            for pix in nm_lst[12]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        elif (-10 < nm < 0) or (0 < nm < 10):
            for pix in nm_lst[int(str(abs(nm))[0])]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        elif nm == 0:
            for pix in nm_lst[0]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)
        else:
            for pix in nm_lst[int(str(abs(nm))[0])]:
                sense.set_pixel(1 + pix[0], 3 + pix[1], w)
            for pix in nm_lst[int(str(abs(nm))[1])]:
                sense.set_pixel(5 + pix[0], 3 + pix[1], w)

    while not interrupt:
        temp = int(sense.get_temperature())
        printNm(temp, nums)
        time.sleep(0.1)
    temp = int(sense.get_temperature())
    reset_interrupt()
    return temp


def daniel():
    reset_interrupt()
    POK1 = [
          (0, 0, 0), (48, 48, 48), (48, 48, 48), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (48, 48, 48),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0),
        (245, 166, 35), (245, 166, 35), (74, 74, 74), (208, 2, 27), (248, 231, 28), (248, 231, 28), (248, 231, 28), (245, 166, 35),
        (0, 0, 0), (139, 87, 42), (74, 74, 74), (248, 231, 28), (245, 166, 35), (245, 166, 35), (245, 166, 35), (0, 0, 0),
        (0, 0, 0), (139, 87, 42), (248, 231, 28), (245, 166, 35), (248, 231, 28), (245, 166, 35), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (245, 166, 35), (139, 87, 42), (139, 87, 42), (245, 166, 35), (0, 0, 0),
      ]
    
    POK2 = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (74, 144, 226), (74, 144, 226), (74, 144, 226), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (74, 144, 226), (255, 255, 255), (0, 0, 0), (255, 255, 255), (74, 144, 226), (74, 144, 226), (0, 0, 0),
        (248, 231, 28), (253, 152, 0), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255), (74, 144, 226), (0, 0, 0),
        (0, 0, 0), (253, 152, 0), (253, 152, 0), (255, 255, 255), (255, 255, 255), (74, 144, 226), (74, 144, 226), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (74, 144, 226), (74, 144, 226), (137, 181, 235), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (137, 181, 235), (0, 0, 0), (0, 0, 0), (137, 181, 235), (137, 181, 235), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 144, 226), (74, 144, 226), (137, 181, 235), (0, 0, 0), (74, 144, 226), (0, 0, 0),
        (0, 0, 0), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0),
      ]
    
    POKEBALL = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    POKEBALL2 = [
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 185, 185), (255, 185, 185), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
      ]

    POKEBALL3 = [
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (252, 93, 93), (252, 93, 93), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
      ]
    
    
    POKEBALL4 = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 64, 64), (255, 64, 64), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]

    POKEBALL5 = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (255, 0, 0), (255, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    OPENBALL = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    OPENBALL2 = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (248, 231, 28), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (248, 231, 28), (0, 0, 0), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    OPENBALL3 = [
          (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (248, 231, 28), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (208, 2, 27), (248, 231, 28), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (0, 0, 0),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (208, 2, 27),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    OPENBALL4 = [
          (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (208, 2, 27), (248, 231, 28), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (248, 231, 28), (208, 2, 27), (248, 231, 28), (208, 2, 27), (248, 231, 28), (208, 2, 27), (248, 231, 28), (0, 0, 0),
        (208, 2, 27), (248, 231, 28), (208, 2, 27), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (208, 2, 27),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]

    OPENBALL5 = [
          (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (208, 2, 27), (248, 231, 28), (208, 2, 27), (0, 0, 0), (0, 0, 0),
        (248, 231, 28), (208, 2, 27), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0),
        (208, 2, 27), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (208, 2, 27),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255),
        (0, 0, 0), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (0, 0, 0),
        (248, 231, 28), (0, 0, 0), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (0, 0, 0), (0, 0, 0),
      ]
    
    OPENBALL6 = [
          (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28), (0, 0, 0), (248, 231, 28),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (208, 2, 27), (248, 231, 28), (0, 0, 0),
        (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (0, 0, 0),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (208, 2, 27),
        (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255),
        (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0),
        (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28),
      ]
    
    OPENBALL7 = [
          (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
      ]
    
    OPENBALL8 = [
          (248, 231, 28), (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255),
        (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28),
        (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (255, 255, 255),
        (248, 231, 28), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28), (255, 255, 255), (255, 255, 255), (248, 231, 28),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (255, 255, 255), (248, 231, 28), (248, 231, 28), (255, 255, 255),
      ]
    
    OPENBALL9 = [
          (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
      ]

    while not interrupt:
      # Henter verdier fra senseHat
      temp = sense.get_temperature()
      accel = sense.get_accelerometer()

      sense.set_pixels(POKEBALL)          # Setter bilde til en pokeball

      aks = True
      while aks == True and not interrupt:            # Så lenge aks = True, altså at Rasberry Pi blir ristet så kjører koden
        x, y, z = sense.get_accelerometer_raw().values()    

      # Tar absoluttverdiene av inputene
        x = abs(x)
        y = abs(y)
        z = abs(z)
            
            # Hvis noen av inputene øker med 2 i et gitt intervall, dvs at den rister, så kjører koden
        if x > 2 or y > 2 or z > 2 :
        
      # Tilegner variabelen temp en verdi over eller under 30 grader i det Rasberry blir ristet
          if temp >= 30:
            temperatur = 30
          else:
            temperatur = 29

            # Bildesekvens for å vise at Pokeballen er i ferd med å åpnes
          for i in range(3):
            sense.set_pixels(POKEBALL2)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL3)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL4)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL5)
            time.sleep(0.4)
            sense.set_pixels(POKEBALL4)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL3)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL2)
            time.sleep(0.2)
            sense.set_pixels(POKEBALL)
            time.sleep(0.2)

          sense.set_pixels(POKEBALL5)
          time.sleep(2)

            # Bildesekvens med animasjon av at ballen åpnes
          sense.set_pixels(OPENBALL)
          time.sleep(0.1)         
          sense.set_pixels(OPENBALL2)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL3)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL4)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL5)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL6)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL7)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL8)
          time.sleep(0.1)        
          sense.set_pixels(OPENBALL9)
          time.sleep(0.1)

            # Sjekker hva verdien for temp var. Hvis 30 så blir pokemonen Pikachu
          if temperatur == 30:
            sense.set_pixels(POK1)
            update_screen("Din Pokemon er Pikachu!")
            time.sleep(5)
            sense.set_pixels(POKEBALL)

            # Hvis under 30 grader, så blir Pokemonen til Piplup
          elif temperatur == 29:
            sense.set_pixels(POK2)
            update_screen("Din pokemon er Piplup!")
            time.sleep(5)
            sense.set_pixels(POKEBALL)

      # Hvis Rasberry ikke ristes settes bildet bare til utgangspunktet
        else:
          sense.set_pixels(POKEBALL)


    reset_interrupt()
    return accel


def even():
    reset_interrupt()
    w = (255, 255, 255)
    r = (255, 0, 0)
    g = (0, 255, 0)
    b = (0, 0, 255)
    FRAME1 = [
          w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
      ]
    
    FRAME2 = [
          r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
      ]
    
    FRAME3 = [
          r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
      ]
    
    FRAME4 = [
          r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
      ]
    
    FRAME5 = [
          w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
      ]
    
    FRAME6 = [
          w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
        r, r, r, w, w, r, r, r,
        r, r, w, w, w, w, r, r,
        r, w, w, w, w, w, w, r,
        w, w, w, r, r, w, w, w,
        w, w, r, r, r, r, w, w,
        w, r, r, r, r, r, r, w,
      ]
    
    FRAME7 = [
          b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
      ]
    
    FRAME8 = [
          b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
      ]
    
    FRAME9 = [
          b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
      ]
    
    FRAME10 = [
          w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
      ]
    
    FRAME11 = [
          w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
      ]
    
    FRAME12 = [
          w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
        w, w, w, b, b, w, w, w,
        b, w, w, w, w, w, w, b,
        b, b, w, w, w, w, b, b,
        b, b, b, w, w, b, b, b,
        w, b, b, b, b, b, b, w,
        w, w, b, b, b, b, w, w,
      ]

    FRAME13 = [
          g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
      ]
    
    FRAME14 = [
          w, w, g, g, g, g, w, w,
        w, g, g, g, g, g, g, w,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        w, g, g, g, g, g, g, w,
        w, w, g, g, g, g, w, w,
      ]
    
    FRAME15 = [
          w, w, w, w, w, w, w, w,
        w, w, g, g, g, g, w, w,
        w, g, g, g, g, g, g, w,
        w, g, g, g, g, g, g, w,
        w, g, g, g, g, g, g, w,
        w, g, g, g, g, g, g, w,
        w, w, g, g, g, g, w, w,
        w, w, w, w, w, w, w, w,
      ]
    
    FRAME16 = [
          w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, g, g, w, w, w,
        w, w, g, g, g, g, w, w,
        w, w, g, g, g, g, w, w,
        w, w, w, g, g, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
      ]
    
    FRAME17 = [
          w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, g, g, w, w, w,
        w, w, w, g, g, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
      ]
    
    FRAME18 = [
          w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
      ]
    
    FRAME19 = [
          g, g, w, w, w, w, g, g,
        g, w, w, w, w, w, w, g,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        w, w, w, w, w, w, w, w,
        g, w, w, w, w, w, w, g,
        g, g, w, w, w, w, g, g,
      ]
    
    FRAME20 = [
          g, g, g, g, g, g, g, g,
        g, g, w, w, w, w, g, g,
        g, w, w, w, w, w, w, g,
        g, w, w, w, w, w, w, g,
        g, w, w, w, w, w, w, g,
        g, w, w, w, w, w, w, g,
        g, g, w, w, w, w, g, g,
        g, g, g, g, g, g, g, g,
      ]
    
    FRAME21 = [
          g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, w, w, g, g, g,
        g, g, w, w, w, w, g, g,
        g, g, w, w, w, w, g, g,
        g, g, g, w, w, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
      ]
    
    FRAME22 = [
          g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, w, w, g, g, g,
        g, g, g, w, w, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
        g, g, g, g, g, g, g, g,
      ]
    
    orientation_rad = sense.get_orientation_radians()
    pitch = orientation_rad["pitch"]
    while not interrupt:
      orientation_rad = sense.get_orientation_radians()
      pitch = orientation_rad["pitch"]

      if pitch > 0.5:
        while not interrupt:
          sense.set_pixels(FRAME1)
          time.sleep(0.1)
          sense.set_pixels(FRAME2)
          time.sleep(0.1)
          sense.set_pixels(FRAME3)
          time.sleep(0.1)
          sense.set_pixels(FRAME4)
          time.sleep(0.1)
          sense.set_pixels(FRAME5)
          time.sleep(0.1)
          sense.set_pixels(FRAME6)
          time.sleep(0.1)
          sense.set_rotation(270)
          orientation_rad = sense.get_orientation_radians()
          pitch = orientation_rad["pitch"]
          if pitch > 0.5:
            continue
          else:
            break
      elif pitch < -0.5:
        while not interrupt:
          sense.set_pixels(FRAME7)
          time.sleep(0.1)
          sense.set_pixels(FRAME8)
          time.sleep(0.1)
          sense.set_pixels(FRAME9)
          time.sleep(0.1)
          sense.set_pixels(FRAME10)
          time.sleep(0.1)
          sense.set_pixels(FRAME11)
          time.sleep(0.1)
          sense.set_pixels(FRAME12)
          time.sleep(0.1)
          sense.set_rotation(270)
          orientation_rad = sense.get_orientation_radians()
          pitch = orientation_rad["pitch"]
          if pitch < -0.5:
            continue
          else:
            break
      else:
        while not interrupt:
          sense.set_pixels(FRAME13)
          time.sleep(0.1)
          sense.set_pixels(FRAME14)
          time.sleep(0.1)
          sense.set_pixels(FRAME15)
          time.sleep(0.1)
          sense.set_pixels(FRAME16)
          time.sleep(0.1)
          sense.set_pixels(FRAME17)
          time.sleep(0.1)
          sense.set_pixels(FRAME18)
          time.sleep(0.1)
          sense.set_pixels(FRAME19)
          time.sleep(0.1)
          sense.set_pixels(FRAME20)
          time.sleep(0.1)
          sense.set_pixels(FRAME21)
          time.sleep(0.1)
          sense.set_pixels(FRAME22)
          time.sleep(0.1)
          sense.set_rotation(270)
          orientation_rad = sense.get_orientation_radians()
          pitch = orientation_rad["pitch"]
          if pitch < 0.5 and pitch > -0.5:
            continue
          else:
            break
    reset_interrupt()
    return pitch
  


def kai():
    reset_interrupt()
    START = [
          (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
      ]

    COMFY1 = [
          (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28),
        (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
      ]
    COMFY2 = [
          (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (248, 231, 28), (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (255, 255, 255), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (255, 255, 255),
      ]
    COLD1 = [
          (255, 255, 255), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (255, 255, 255),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (255, 255, 255), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (255, 255, 255),
      ]
    COLD2 = [
          (255, 255, 255), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (255, 255, 255),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194), (0, 0, 0), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194),
        (80, 227, 194), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (80, 227, 194),
        (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194),
        (255, 255, 255), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (80, 227, 194), (255, 255, 255),
      ]
    HOT1 = [
          (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (80, 227, 194), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (80, 227, 194),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (208, 2, 27), (208, 2, 27), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (80, 227, 194), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
      ]
    HOT2 = [
          (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (80, 227, 194), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (80, 227, 194), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (80, 227, 194),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (208, 2, 27), (208, 2, 27), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (255, 255, 255), (80, 227, 194), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
      ]
    HOT3 = [
          (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (74, 144, 226), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (74, 144, 226), (0, 0, 0), (208, 2, 27), (208, 2, 27), (0, 0, 0), (245, 166, 35), (74, 144, 226),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
      ]  
    HOT4 = [
          (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (74, 144, 226), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (208, 2, 27), (208, 2, 27), (74, 144, 226), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (74, 144, 226), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (74, 144, 226),
        (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
      ]
    HOT5 = [
          (255, 255, 255), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (74, 144, 226),
        (245, 166, 35), (74, 144, 226), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (0, 0, 0), (208, 2, 27), (208, 2, 27), (0, 0, 0), (245, 166, 35), (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (74, 144, 226), (245, 166, 35), (245, 166, 35),
        (255, 255, 255), (74, 144, 226), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (255, 255, 255),
      ]  


    temp = sense.get_temperature()
    while not interrupt:
      temp = sense.get_temperature()

      sense.set_pixels(START)

      if temp <= 25 and temp > 15:
        sense.set_pixels(COMFY1)
        time.sleep(0.5)
        sense.set_pixels(COMFY2)
        time.sleep(0.5)

      elif temp <= 15:
        sense.set_pixels(COLD1)
        time.sleep(0.5)
        sense.set_pixels(COLD2)
        time.sleep(0.5)

      elif temp > 25:
        sense.set_pixels(HOT1)
        time.sleep(0.5)
        sense.set_pixels(HOT2)
        time.sleep(0.5)
        sense.set_pixels(HOT3)
        time.sleep(0.5)
        sense.set_pixels(HOT4)
        time.sleep(0.5)
        sense.set_pixels(HOT5)
        time.sleep(0.5)
    reset_interrupt()
    return temp



def magnus():
    reset_interrupt()
    b = (128, 128, 128)  # Bakgrunn
    p = (255, 0, 255)  # StammePil
    m = (0, 0, 0)  # Midten
    x = (255, 0, 128)  # PilVinge
    W = (255, 255, 255)  # Loading
    COMPASS_DEFAULT = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CN = [
        b, b, b, x, x, b, b, b,
        b, b, x, p, p, x, b, b,
        b, x, b, p, p, b, x, b,
        b, b, b, p, p, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CNE = [
        b, b, b, b, b, x, x, x,
        b, b, b, b, x, b, p, x,
        b, b, b, b, b, p, b, x,
        b, b, b, m, p, b, x, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CE = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, x, b, b,
        b, b, b, b, b, b, x, b,
        b, b, b, m, p, p, p, x,
        b, b, b, m, p, p, p, x,
        b, b, b, b, b, b, x, b,
        b, b, b, b, b, x, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CSE = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, m, p, b, x, b,
        b, b, b, b, b, p, b, x,
        b, b, b, b, x, b, p, x,
        b, b, b, b, b, x, x, x,
    ]

    CS = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, p, p, b, b, b,
        b, x, b, p, p, b, x, b,
        b, b, x, p, p, x, b, b,
        b, b, b, x, x, b, b, b,
    ]

    CSW = [
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, m, m, b, b, b,
        b, x, b, p, m, b, b, b,
        x, b, p, b, b, b, b, b,
        x, p, b, x, b, b, b, b,
        x, x, x, b, b, b, b, b,
    ]

    CW = [
        b, b, b, b, b, b, b, b,
        b, b, x, b, b, b, b, b,
        b, x, b, b, b, b, b, b,
        x, p, p, p, m, b, b, b,
        x, p, p, p, m, b, b, b,
        b, x, b, b, b, b, b, b,
        b, b, x, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    CNW = [
        x, x, x, b, b, b, b, b,
        x, p, b, x, b, b, b, b,
        x, b, p, b, b, b, b, b,
        b, x, b, p, m, b, b, b,
        b, b, b, m, m, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
        b, b, b, b, b, b, b, b,
    ]

    SOL_NED = [
        (245, 66, 35), (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35),
        (245, 176, 35), (245, 176, 35),
        (245, 66, 35), (245, 103, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 176, 35),
        (245, 213, 35), (250, 232, 31),
        (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 154, 35), (245, 176, 35), (245, 213, 35),
        (250, 232, 31), (255, 246, 162),
        (245, 103, 35), (245, 125, 35), (245, 125, 35), (245, 176, 35), (245, 176, 35), (250, 232, 31),
        (255, 246, 162), (255, 255, 255),
        (5, 47, 189), (5, 77, 224), (35, 118, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245), (35, 199, 245),
        (35, 199, 245),
        (5, 77, 224), (35, 118, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245), (35, 177, 245),
        (35, 177, 245), (35, 177, 245),
        (35, 118, 245), (35, 126, 245), (35, 111, 245), (35, 126, 245), (35, 126, 245), (35, 126, 245),
        (35, 126, 245), (35, 118, 245),
        (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (0, 101, 255), (35, 118, 245),
        (5, 77, 224),
    ]

    LOADING_COMPLETE = [
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (19, 253, 3),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (19, 253, 3), (19, 253, 3),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (19, 253, 3),
        (19, 253, 3), (255, 255, 255),
        (19, 253, 3), (255, 255, 255), (255, 255, 255), (255, 255, 255), (19, 253, 3), (19, 253, 3),
        (255, 255, 255), (255, 255, 255),
        (19, 253, 3), (19, 253, 3), (255, 255, 255), (19, 253, 3), (19, 253, 3), (255, 255, 255), (255, 255, 255),
        (255, 255, 255),
        (255, 255, 255), (19, 253, 3), (19, 253, 3), (19, 253, 3), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (19, 253, 3), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
        (255, 255, 255), (255, 255, 255),
    ]

    sense.set_pixels(SOL_NED)
    time.sleep(0.5)

    # Loadingscreen
    for i, v in enumerate(SOL_NED):
        if i == 7:
            SOL_NED[0:8] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 15:
            SOL_NED[8:16] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 23:
            SOL_NED[16:24] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 31:
            SOL_NED[24:32] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 39:
            SOL_NED[32:40] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 47:
            SOL_NED[40:48] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 55:
            SOL_NED[48:56] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))
        elif i == 63:
            SOL_NED[56:64] = W, W, W, W, W, W, W, W,
            time.sleep(float((random.randint(0, 15)) / 10))

        sense.set_pixels(SOL_NED)

    sense.set_pixels(LOADING_COMPLETE)
    time.sleep(0.5)

    compass = sense.get_compass()
    while not interrupt:
        compass = sense.get_compass()

        if compass <= 22.5:
            i = CN

        elif 22.5 < compass <= 67.5:
            i = CNW

        elif 67.5 < compass <= 112.5:
            i = CW

        elif 112.5 < compass <= 157.5:
            i = CSW

        elif 157.5 < compass <= 202.5:
            i = CS

        elif 202.5 < compass <= 247.5:
            i = CSE

        elif 247.5 < compass <= 292.5:
            i = CE

        elif 292.5 < compass <= 337.5:
            i = CNE

        elif compass > 337.5:
            i = CN

        sense.set_pixels(i)
    reset_interrupt()
    return compass



def markus():
    reset_interrupt()
    start_pressure = sense.get_pressure() # Måler trykket for å lage en referansetrykkverdi
    state = 1 # state er en variabel som brukes for å holde kontroll på hvordan ballongen ser ut på LED-matrisen, og når ballongen skal sprekke

    # Bilder for de ulike tilstandene ballongen går igjennom:
    STATE1 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (24, 53, 211), (24, 53, 211), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE2 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE3 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (26, 44, 210), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE4 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 74, 74), (34, 52, 230), (26, 44, 210), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE5 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE6 = [
        (0, 0, 0), (0, 0, 0), (18, 37, 220), (34, 52, 230), (34, 52, 230), (18, 37, 220), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (18, 37, 220), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (18, 37, 220), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (74, 74, 74), (34, 52, 230), (34, 52, 230), (74, 74, 74), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (34, 52, 230), (34, 52, 230), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE7 = [
        (245, 166, 35), (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (245, 166, 35), (35, 100, 245), (208, 2, 27), (208, 2, 27),
        (245, 166, 35),
        (245, 166, 35), (208, 2, 27), (35, 100, 245), (245, 166, 35), (245, 166, 35), (35, 100, 245), (208, 2, 27),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (245, 166, 35), (245, 166, 35), (245, 166, 35), (35, 100, 245), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (208, 2, 27), (35, 100, 245), (245, 166, 35), (245, 166, 35), (35, 100, 245), (208, 2, 27),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (245, 166, 35), (35, 100, 245), (35, 100, 245), (245, 166, 35), (208, 2, 27),
        (245, 166, 35),
        (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (245, 166, 35),
        (245, 166, 35),
        (245, 166, 35), (245, 166, 35), (245, 166, 35), (208, 2, 27), (245, 166, 35), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
    ]

    STATE8 = [
        (208, 2, 27), (208, 2, 27), (245, 166, 35), (208, 2, 27), (24, 24, 215), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
        (208, 2, 27), (24, 24, 215), (245, 166, 35), (24, 24, 215), (245, 166, 35), (24, 24, 215), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (24, 24, 215), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215),
        (208, 2, 27),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215),
        (245, 166, 35),
        (245, 166, 35), (24, 24, 215), (208, 2, 27), (208, 2, 27), (208, 2, 27), (24, 24, 215), (245, 166, 35),
        (208, 2, 27),
        (245, 166, 35), (245, 166, 35), (24, 24, 215), (24, 24, 215), (208, 2, 27), (245, 166, 35), (245, 166, 35),
        (245, 166, 35),
        (208, 2, 27), (245, 166, 35), (208, 2, 27), (245, 166, 35), (245, 166, 35), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
        (208, 2, 27), (208, 2, 27), (208, 2, 27), (245, 166, 35), (208, 2, 27), (208, 2, 27), (208, 2, 27),
        (208, 2, 27),
    ]

    STATE9 = [
        (248, 231, 28), (18, 45, 211), (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (248, 231, 28),
        (248, 231, 28),
        (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28), (245, 166, 35), (248, 231, 28), (18, 45, 211),
        (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28),
        (18, 45, 211),
        (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28), (245, 166, 35), (248, 231, 28), (245, 166, 35),
        (18, 45, 211),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (18, 45, 211),
        (248, 231, 28),
        (18, 45, 211), (245, 166, 35), (248, 231, 28), (248, 231, 28), (245, 166, 35), (18, 45, 211), (18, 45, 211),
        (248, 231, 28),
        (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28), (248, 231, 28),
        (245, 166, 35),
        (248, 231, 28), (248, 231, 28), (248, 231, 28), (18, 45, 211), (248, 231, 28), (245, 166, 35), (248, 231, 28),
        (248, 231, 28),
    ]

    STATE10 = [
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (74, 74, 74),
        (74, 74, 74),
        (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (74, 74, 74),
        (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28),
        (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (248, 231, 28), (248, 231, 28), (248, 231, 28), (248, 231, 28), (74, 74, 74),
        (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
        (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74), (74, 74, 74),
    ]

    STATE11 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    STATE12 = [
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
        (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    ]

    sense.set_pixels(STATE1)

    while not interrupt:
        blowing_pressure = sense.get_pressure() - start_pressure # Trykk fra blåsingen er differansen mellom oppdatert trykk og referansetrykk
        if blowing_pressure > 0.2: # Her kan man styre hvor stor differansen må være, altså hvor hardt man må blåse, for at ballongen skal vokse
            inflate = True # inflate er en variabel som sier om ballongen vokser eller krymper
        else:
            inflate = False

        # Sjekker for hver tilstand om ballongen vokser eller krymper, og avgjør om ballongen skal gå til neste eller forrige tilstand:
        if state == 1:
            if inflate:
                state = 2
                sense.set_pixels(STATE2)
        elif state == 2:
            if inflate:
                state = 3
                sense.set_pixels(STATE3)
            else:
                state = 1
                sense.set_pixels(STATE1)
        elif state == 3:
            if inflate:
                state = 4
                sense.set_pixels(STATE4)
            else:
                state = 2
                sense.set_pixels(STATE2)
        elif state == 4:
            if inflate:
                state = 5
                sense.set_pixels(STATE5)
            else:
                state = 3
                sense.set_pixels(STATE3)
        elif state == 5:
            if inflate:
                state = 6
                sense.set_pixels(STATE6)
            else:
                state = 4
                sense.set_pixels(STATE4)
        elif state == 6:
            if inflate: # Dersom ballongen vokser i tilstand 6 sprekker ballongen
                state = 1
                sense.set_pixels(STATE7)
                time.sleep(0.2)
                sense.set_pixels(STATE8)
                time.sleep(0.2)
                sense.set_pixels(STATE9)
                time.sleep(0.2)
                sense.set_pixels(STATE10)
                time.sleep(0.2)
                sense.set_pixels(STATE11)
                time.sleep(0.2)
                sense.set_pixels(STATE12)
                time.sleep(0.2)
                sense.set_pixels(STATE1)
            else:
                state = 5
                sense.set_pixels(STATE5)

        time.sleep(0.5)
    reset_interrupt()
    return sense.get_pressure() # Når funksjonen avsluttes returneres avlest trykkverdi



# Funksjon for å legge til verdier i fil, values er liste med retur verdiene
def add_to_file(values):
  text = ""
  for i in values:
    text += str(i) + ";"
  text += "\n"
  file = open(filename, "a")
  file.write(text)
  file.close()
  

# Printer toppen av boksen
def startingLines():
    print("╔" + ("═"*box_width) + "╗")
    print("║" + (" "*box_width) + "║")
    print("║" + "Velkommen til gruppe 18 sitt program".center(box_width, " ") + "║")
    print("║" + (" "*box_width) + "║")
    print("║" + "Bruk joy venstre eller høyre for å navigere i menyen, klikk for å velge program!".ljust(box_width) + "║")
    print("║" + "Hold inne joy for å gå ut av kjørende program, dette vil lagre sensorverdi og gå tilbake til menyen.".ljust(box_width) + "║")
    print("║" + (" "*box_width) + "║")
    print("║" + (" "*box_width) + "║")
    print("║" + (" "*box_width) + "║")
    print("╚" + ("═"*box_width) + "╝")

# Oppdaterer tekst i boksen
def update_screen(text):
    txt = str(text)
    print("\033[F" + "\033[F" + "\033[F", end="\x1b[1K\r")
    if len(txt) > box_width:
        print("║" + txt[:box_width].ljust(box_width) + "║")
        print("║" + txt[box_width:].ljust(box_width) + "║")
    else:
        print("║" + txt.ljust(box_width) + "║")
        print("║" + (" "*box_width) + "║")
    print("╚" + ("═"*box_width) + "╝")

# Bilde bytter
def transition(pic1, pic2, right):
  sleep_time = 0.05
  if right:
    state = []
    for i in range(1, 9):
      for j in range(8):
        for k in range(i, 8):
          state.append(pic1[(8*j)+k])
        for k in range(i):
          state.append(pic2[(8*j)+k])
      sense.set_pixels(state)
      time.sleep(sleep_time)
      state = []
  else:
    state = []
    for i in range(1, 9):
      for j in range(8):
        for k in range(8-i, 8):
          state.append(pic2[(8*j)+k])
        for k in range(8-i):
          state.append(pic1[(8*j)+k])
      sense.set_pixels(state)
      time.sleep(sleep_time)
      state = []



# Hoved funksjonen
def main():
    # Hente verdier som skal kunne forandres i main
    global meny_selection
    global j_right_click
    global j_left_click
    global j_middle_click
    global interrupt
    
    # Binder funksjoner til knapper
    sense.stick.direction_down = j_left
    sense.stick.direction_up = j_right
    sense.stick.direction_middle = j_middle
    
    
    # Lager liste for lagring i fil
    return_values = [None] * 6
    sense.set_pixels(start_screen)
    startingLines()
    update_screen("")
    time.sleep(3)
    
    # Setter første bilde og tekst
    sense.set_pixels(meny_pictures[meny_selection])
    update_screen(meny_text[meny_selection])
    
    
    #Hoved loop
    while True:
      
        # Se om knapp har blitt trykket
        if j_right_click:
            j_right_click = False
            meny_selection += 1
            if meny_selection > meny_max:
                meny_selection = 0
                transition(meny_pictures[6], meny_pictures[0], True)
            else:
              transition(meny_pictures[meny_selection-1], meny_pictures[meny_selection], True)
            update_screen(meny_text[meny_selection])
        elif j_left_click:
            j_left_click = False
            meny_selection -= 1
            if meny_selection < 0:
                meny_selection = meny_max
                transition(meny_pictures[0], meny_pictures[6], False)
            else:
                transition(meny_pictures[meny_selection+1], meny_pictures[meny_selection], False)
            update_screen(meny_text[meny_selection])
        elif j_middle_click:
            j_middle_click = False
            meny_runned[meny_selection] = True
            
            # Velge hvilket program som skal kjøre
            if meny_selection == 0:
                update_screen(spill_text[meny_selection])
                return_values[0] = magnus()
            elif meny_selection == 1:
                update_screen(spill_text[meny_selection])
                return_values[1] = kalles()
            elif meny_selection == 2:
                update_screen(spill_text[meny_selection])
                return_values[2] = markus()
            elif meny_selection == 3:
                update_screen(spill_text[meny_selection])
                return_values[3] = kai()
            elif meny_selection == 4:
                update_screen(spill_text[meny_selection])
                return_values[4] = even()
            elif meny_selection == 5:
                update_screen(spill_text[meny_selection])
                return_values[5] = daniel()
            elif meny_selection == 6: # Skjerm 6 er avslutt skjerm, lagrer til fil og stopper prosess
                update_screen(spill_text[meny_selection])
                add_to_file(return_values)
                time.sleep(1)
                sense.clear()
                break
        # Setter riktig bilde
        sense.set_pixels(meny_pictures[meny_selection])
        red_square()
        screen_six_display()
        

if __name__ == "__main__":
    main()
